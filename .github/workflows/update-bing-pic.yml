name: Update Bing Wallpaper

on:
  schedule:
    # 每10分钟检查一次新图片 (UTC时间)
    - cron: '*/10 * * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  update-bing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Setup environment
      run: |
        mkdir -p pic json api/today
        echo "当前时间: $(date)"
        echo "UTC时间: $(date -u)"

    - name: Get Bing image data
      id: bing-data
      run: |
        # 获取Bing图片数据
        echo "正在获取Bing图片数据..."
        JSON_RESPONSE=$(curl -s "https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1&mkt=en-US")
        echo "Bing API响应: $JSON_RESPONSE"
        
        # 提取图片信息
        IMG_URL_SUFFIX=$(echo "$JSON_RESPONSE" | grep -oP '"url":"[^"]*"' | cut -d'"' -f4)
        IMG_DATE=$(echo "$JSON_RESPONSE" | grep -oP '"startdate":"[^"]*"' | cut -d'"' -f4)
        IMG_TITLE=$(echo "$JSON_RESPONSE" | grep -oP '"title":"[^"]*"' | cut -d'"' -f4)
        
        echo "图片URL后缀: $IMG_URL_SUFFIX"
        echo "图片日期: $IMG_DATE"
        echo "图片标题: $IMG_TITLE"
        
        # 设置输出变量
        echo "img_url_suffix=$IMG_URL_SUFFIX" >> $GITHUB_OUTPUT
        echo "img_date=$IMG_DATE" >> $GITHUB_OUTPUT
        echo "img_title=$IMG_TITLE" >> $GITHUB_OUTPUT
        
        # 保存原始JSON
        echo "$JSON_RESPONSE" > "json/$IMG_DATE.json"

    - name: Download and process image
      run: |
        IMG_URL_SUFFIX="${{ steps.bing-data.outputs.img_url_suffix }}"
        IMG_DATE="${{ steps.bing-data.outputs.img_date }}"
        
        if [ -z "$IMG_URL_SUFFIX" ]; then
          echo "❌ 无法获取图片URL，跳过下载"
          exit 0
        fi
        
        echo "正在下载图片: $IMG_DATE"
        IMG_URL="https://www.bing.com$IMG_URL_SUFFIX"
        
        # 下载图片到pic目录
        if curl -s -L -o "pic/$IMG_DATE.jpg" "$IMG_URL"; then
          echo "✅ 图片下载成功: pic/$IMG_DATE.jpg"
          ls -la "pic/$IMG_DATE.jpg"
        else
          echo "❌ 图片下载失败"
          exit 1
        fi

    - name: Update today's wallpaper
      run: |
        IMG_DATE="${{ steps.bing-data.outputs.img_date }}"
        TODAY=$(date -u +%Y%m%d)  # 使用UTC时间
        
        echo "图片日期: $IMG_DATE"
        echo "今天日期: $TODAY"
        
        # 检查是否是今天的图片
        if [ "$IMG_DATE" = "$TODAY" ]; then
          echo "🔄 更新今日壁纸..."
          
          # 复制到api/today目录
          cp "pic/$IMG_DATE.jpg" "api/today/1920x1080.jpg"
          echo "✅ 今日壁纸已更新: api/today/1920x1080.jpg"
          
          # 创建访问日志
          echo "$(date -u): Updated today's wallpaper - $IMG_DATE" >> api/update.log
        else
          echo "📅 图片不是今天的，跳过更新今日壁纸"
        fi

    - name: Update dates index
      run: |
        IMG_DATE="${{ steps.bing-data.outputs.img_date }}"
        
        if [ -n "$IMG_DATE" ]; then
          # 更新日期索引
          if [ -f dates.txt ]; then
            if ! grep -q "$IMG_DATE" dates.txt; then
              echo "$IMG_DATE" >> dates.txt
              echo "✅ 添加新日期到索引: $IMG_DATE"
            else
              echo "📝 日期已存在于索引: $IMG_DATE"
            fi
          else
            echo "$IMG_DATE" > dates.txt
            echo "✅ 创建日期索引: $IMG_DATE"
          fi
          
          # 显示当前所有日期
          echo "当前所有日期:"
          cat dates.txt || echo "无日期记录"
        fi

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查是否有更改
        if git diff --quiet && git diff --staged --quiet; then
          echo "📝 没有更改需要提交"
        else
          echo "🔄 提交更改..."
          git add .
          git commit -m "Auto-update: $(date -u +%Y%m%d-%H%M%S)"
          git push
          echo "✅ 更改已推送"
        fi
