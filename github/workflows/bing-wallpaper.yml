name: Bing Wallpaper Automation

on:
  schedule:
    # 每10分钟检查一次新图片 (UTC时间)
    - cron: '*/10 * * * *'
  workflow_dispatch: # 允许手动触发
  push:
    branches: [ main ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-wallpaper:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Setup directories
      run: |
        mkdir -p pic json api/today
        echo "工作开始时间: $(date -u)"

    - name: Fetch Bing image data
      id: fetch-data
      run: |
        echo "正在获取Bing图片数据..."
        
        # 使用更可靠的方式获取JSON数据
        API_URL="https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1&mkt=en-US"
        JSON_RESPONSE=$(curl -s -f "$API_URL")
        
        if [ $? -ne 0 ]; then
          echo "❌ 无法访问Bing API"
          exit 1
        fi
        
        echo "Bing API响应: $JSON_RESPONSE"
        
        # 使用更健壮的方式解析JSON
        IMG_URL_SUFFIX=$(echo "$JSON_RESPONSE" | sed -n 's/.*"url":"\([^"]*\)".*/\1/p')
        IMG_DATE=$(echo "$JSON_RESPONSE" | sed -n 's/.*"startdate":"\([^"]*\)".*/\1/p')
        IMG_TITLE=$(echo "$JSON_RESPONSE" | sed -n 's/.*"title":"\([^"]*\)".*/\1/p')
        
        if [ -z "$IMG_URL_SUFFIX" ] || [ -z "$IMG_DATE" ]; then
          echo "❌ 无法解析Bing API响应"
          echo "URL后缀: $IMG_URL_SUFFIX"
          echo "日期: $IMG_DATE"
          exit 1
        fi
        
        echo "图片URL后缀: $IMG_URL_SUFFIX"
        echo "图片日期: $IMG_DATE"
        echo "图片标题: $IMG_TITLE"
        
        # 保存JSON数据
        echo "$JSON_RESPONSE" > "json/$IMG_DATE.json"
        echo "date=$IMG_DATE" >> $GITHUB_OUTPUT

    - name: Download Bing image
      run: |
        IMG_DATE="${{ steps.fetch-data.outputs.date }}"
        echo "正在下载图片: $IMG_DATE"
        
        # 重新获取URL后缀，确保最新
        JSON_RESPONSE=$(curl -s "https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1&mkt=en-US")
        IMG_URL_SUFFIX=$(echo "$JSON_RESPONSE" | sed -n 's/.*"url":"\([^"]*\)".*/\1/p')
        
        if [ -z "$IMG_URL_SUFFIX" ]; then
          echo "❌ 无法获取图片URL"
          exit 1
        fi
        
        IMG_URL="https://www.bing.com$IMG_URL_SUFFIX"
        echo "完整图片URL: $IMG_URL"
        
        # 下载图片
        if curl -s -L -f -o "pic/$IMG_DATE.jpg" "$IMG_URL"; then
          echo "✅ 图片下载成功"
          ls -la "pic/$IMG_DATE.jpg"
        else
          echo "❌ 图片下载失败"
          exit 1
        fi

    - name: Update today's wallpaper
      run: |
        IMG_DATE="${{ steps.fetch-data.outputs.date }}"
        TODAY=$(date -u +%Y%m%d)
        
        echo "图片日期: $IMG_DATE"
        echo "今天日期: $TODAY"
        
        # 检查是否是今天的图片
        if [ "$IMG_DATE" = "$TODAY" ]; then
          echo "🔄 更新今日壁纸..."
          
          # 复制到api/today目录
          cp "pic/$IMG_DATE.jpg" "api/today/1920x1080.jpg"
          echo "✅ 今日壁纸已更新"
          
          # 记录更新时间
          echo "$(date -u): Updated - $IMG_DATE" > api/update.txt
        else
          echo "📅 图片不是今天的，跳过更新今日壁纸"
        fi

    - name: Update dates index
      run: |
        IMG_DATE="${{ steps.fetch-data.outputs.date }}"
        
        # 更新日期索引
        if [ -f dates.txt ]; then
          if ! grep -q "^$IMG_DATE$" dates.txt; then
            echo "$IMG_DATE" >> dates.txt
            echo "✅ 添加新日期: $IMG_DATE"
          fi
        else
          echo "$IMG_DATE" > dates.txt
          echo "✅ 创建日期索引"
        fi
        
        echo "当前所有日期:"
        sort dates.txt | uniq | tee dates_sorted.txt
        mv dates_sorted.txt dates.txt

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加所有可能的新文件
        git add -A
        
        # 检查是否有更改
        if git diff --staged --quiet; then
          echo "📝 没有更改需要提交"
        else
          echo "🔄 提交更改..."
          git commit -m "Auto-update: $(date -u +%Y%m%d-%H%M%S)"
          git push
          echo "✅ 更改已推送"
        fi

  deploy-pages:
    needs: update-wallpaper
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Build site structure
      run: |
        # 确保必要的文件存在
        [ -f CNAME ] || echo "你的域名.com" > CNAME
        touch .nojekyll
        
        # 创建简单的主页
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Bing Wallpaper API</title>
            <meta http-equiv="refresh" content="0; url=/api/today/1920x1080.jpg">
        </head>
        <body>
            <p>Redirecting to today's Bing wallpaper...</p>
            <p>If not redirected, <a href="/api/today/1920x1080.jpg">click here</a>.</p>
        </body>
        </html>
        EOF
        
        # 如果api/today/1920x1080.jpg不存在，尝试从pic目录复制今天的图片
        if [ ! -f "api/today/1920x1080.jpg" ]; then
          TODAY=$(date +%Y%m%d)
          if [ -f "pic/$TODAY.jpg" ]; then
            mkdir -p api/today
            cp "pic/$TODAY.jpg" "api/today/1920x1080.jpg"
            echo "使用今日图片作为初始壁纸"
          fi
        fi
        
        echo "最终文件结构:"
        find . -name "*.jpg" | head -10

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: .
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v3
